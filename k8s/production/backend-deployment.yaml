apiVersion: apps/v1
kind: Deployment
metadata:
  name: yield-farming-backend
  namespace: yield-farming
  labels:
    app: yield-farming-backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: yield-farming-backend
  template:
    metadata:
      labels:
        app: yield-farming-backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: yield-farming-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: ghcr.io/your-org/yield-farming/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: redis-url
        - name: INFURA_API_KEY
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: infura-api-key
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: private-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: jwt-secret
        - name: CHAINLINK_REGISTRY_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: yield-farming-config
              key: chainlink-registry-address
        - name: GELATO_RELAY_API_KEY
          valueFrom:
            secretKeyRef:
              name: yield-farming-secrets
              key: gelato-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: yield-farming-config
      imagePullSecrets:
      - name: ghcr-secret

---
apiVersion: v1
kind: Service
metadata:
  name: yield-farming-backend-service
  namespace: yield-farming
  labels:
    app: yield-farming-backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: yield-farming-backend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: yield-farming-backend
  namespace: yield-farming
  labels:
    app: yield-farming-backend

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: yield-farming-backend-netpol
  namespace: yield-farming
spec:
  podSelector:
    matchLabels:
      app: yield-farming-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: yield-farming-frontend
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: yield-farming-backend-hpa
  namespace: yield-farming
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: yield-farming-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: yield-farming-backend-pdb
  namespace: yield-farming
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: yield-farming-backend
